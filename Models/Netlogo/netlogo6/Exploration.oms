import java.text.SimpleDateFormat
import java.util.Date

logger.level("FINE")

// variables
val gravityDecay = Val[Double]
val distribSd = Val[Double]
val overlapThreshold = Val[Double]
val transportationCost = Val[Double]
val averageDistanceVariability = Val[Double]

// indicators
val totalWaste = Val[Double]
val totalCost = Val[Double]
val relativeCost = Val[Double]
val finalTime = Val[Double]
val nwComponents = Val[Double]
val nwCentrality = Val[Double]
val nwInDegree = Val[Double]
val nwOutDegree = Val[Double]
val nwMeanFlow = Val[Double]
val nwClustCoef = Val[Double]

//val setupType = Val[String]

val id = Val[Int]
val replication = Val[Int]

// setup-experiment [t distribution-sd gravity-decay overlap-threshold transport-cost average-distance-variability]
//val cmds = Seq("setup-experiment \"synthetic-city-system\" ${distribSd} ${gravityDecay} ${overlapThreshold} ${transportationCost}","run-experiment")
//val cmds = Seq("setup-experiment \"gis\" ${distribSd} ${gravityDecay} ${overlapThreshold} ${transportationCost}","run-experiment")
val cmds = Seq("setup-experiment \"synthetic-city-system\" ${distribSd} ${gravityDecay} ${overlapThreshold} ${transportationCost} ${averageDistanceVariability}","run-experiment")

val model = NetLogo6Task(workDirectory / "HEADLESS_circeco.nlogo",cmds,embedWorkspace=true) set(
    inputs += (gravityDecay,distribSd,overlapThreshold,transportationCost,averageDistanceVariability),
    outputs += (gravityDecay,distribSd,overlapThreshold,transportationCost,averageDistanceVariability),
    netLogoOutputs += ("total-waste", totalWaste),
    netLogoOutputs += ("total-cost", totalCost),
    netLogoOutputs += ("relative-cost", relativeCost),
    netLogoOutputs += ("final-time", finalTime),
    netLogoOutputs += ("network-components", nwComponents),
    netLogoOutputs += ("network-in-degree", nwInDegree),
    netLogoOutputs += ("network-out-degree", nwOutDegree),
    netLogoOutputs += ("network-mean-flow", nwMeanFlow),
    netLogoOutputs += ("network-clustering-coeficient", nwClustCoef)
)


val purpose = "DIRECTSAMPLING_SYNTHETIC_LOCAL"
//val purpose = "TEST"

val indics_hook = AppendToCSVFileHook(workDirectory / "exploration" / ((new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss")).format(new Date()))+"_"+purpose+".csv")

//val env = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 2000 megabytes)
val env = LocalEnvironment(50)


val replications =
 Replication (
   //evaluation = (model on env by 50 hook indics_hook),
   evaluation = (model on env hook indics_hook),
   seed = replication,
   replications = 10
)

val exploration =
  DirectSampling(
    evaluation = replications,
    sampling = (
      ((gravityDecay in (10.0 to 90.0 by 40.0)) x
      (distribSd in (0.1 to 0.6 by 0.5)) x
      (overlapThreshold in (0.0 to 0.5 by 0.1)) x
      (transportationCost in (0.5 to 3.6 by 3.0)) x
      (averageDistanceVariability in (0.0 to 20.0 by 4.0)))
      /*LHS(1,
        gravityDecay in Range(10.0,100.0),
	distribSd in Range(0.1,0.6),
        overlapThreshold in Range(0.0,0.5),
        transportationCost in Range(0.5,3.0),
        averageDistanceVariability in Range(0.0,20.0)
      )*/
         withIndex id )
  )


exploration
